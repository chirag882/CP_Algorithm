<snippet>
	<content><![CDATA[
class TrieNode {
public:
    char data;
    TrieNode* children[26];
    bool isTerminal;

    TrieNode(char ch){
        data = ch;
        for(int i=0;i<26;i++){
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie{
public:
    TrieNode* root;

    Trie(){
        root = new TrieNode('\0');
    }

    void insertUtil(TrieNode* root,string word){
        // base case
        if(word.length() == 0){
            root->isTerminal = true;
            return;
        }

        // Assumption word will be in small letters
        int index = word[0] - 'a';
        TrieNode* child;

        // present
        if(root->children[index] != NULL){
            child = root->children[index];
        }else{
            // absent
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }

        // recursion
        insertUtil(child,word.substr(1));

    }

    void insertWord(string word){
        insertUtil(root,word);
    }


    bool searchUtil(TrieNode* root,string word){
        // base case
        if(word.length() == 0){
            return root->isTerminal;
        }

        // Assumption word will be in small letters
        int index = word[0] - 'a';
        TrieNode* child;

        // present
        if(root->children[index] != NULL){
            child = root->children[index];
        }else{
            // absent
            return false;
        }

        // recursion
        return searchUtil(child,word.substr(1));
    }


    bool searchWord(string word){
        return searchUtil(root,word);
    }

    bool prefixUtil(TrieNode* root,string word){
        // base case
        if(word.length() == 0){
            return true;
        }

        // Assumption word will be in small letters
        int index = word[0] - 'a';
        TrieNode* child;

        // present
        if(root->children[index] != NULL){
            child = root->children[index];
        }else{
            // absent
            return false;
        }

        // recursion
        return prefixUtil(child,word.substr(1));
    }

    bool startsWith(string prefix){
        return prefixUtil(root,prefix);
    }


};


void solve(){   
    Trie *t = new Trie();
    t->insertWord("abcd");
    cout<<t->searchWord("abcdw")<<"\n";

}   
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Trie</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
